{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/victor/index.js","src/main.js"],"names":[],"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","'use strict';\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar Vec2 = _interopDefault(require('victor'));\n\nclass AABB {\n    constructor(lowerLeft, upperRight) {\n        this._lowerLeft = lowerLeft;\n        this._upperRight = upperRight;\n\n        this._calculateDimensions();\n    }\n\n    _calculateDimensions() {\n        this.width = this._upperRight.x - this._lowerLeft.x;\n        this.height = this._upperRight.y - this._lowerLeft.y;\n    }\n\n    add(vec) {\n        this._lowerLeft.add(vec);\n        this._upperRight.add(vec);\n    }\n\n    set lowerLeft(lowerLeft) {\n        this._lowerLeft = lowerLeft;\n\n        this._calculateDimensions();\n    }\n\n    get lowerLeft() {\n        return this._lowerLeft;\n    }\n\n    set upperRight(upperRight) {\n        this._upperRight = upperRight;\n\n        this._calculateDimensions();\n    }\n\n    get upperRight() {\n        return this._upperRight;\n    }\n\n    collisionWith(rhs) {\n        return !(\n            this._upperLeft.x < rhs._lowerLeft.x ||\n            rhs._upperLeft.x < this._lowerLeft.x ||\n            this._lowerLeft.y > rhs._upperLeft.y ||\n            rhs._lowerLeft.y > this._upperLeft.y\n        );\n    }\n}\n\nconst PLAYER_WIDTH = 0.5;\nconst PLAYER_HEIGHT = 1;\nconst MOVE_SPEED = 0.8;\nconst JUMP_VELOCITY = 1;\n\nconst KEYBINDINGS = {\n    // Cardinal Directions\n    LEFT: ['arrowleft', 'a'],\n    RIGHT: ['arrowright', 'd'],\n    DOWN: ['arrowdown', 's'],\n\n    JUMP: ['arrowup', 'w'],\n\n    ATTACK: [' '],\n};\n\n// Don't hate the player.  Hate the game.\nclass Player {\n    /**\n     * @param  {Vec2} origin The center, bottom of the player\n     */\n    constructor(origin) {\n        const lowerLeft = Vec2(origin.x - PLAYER_WIDTH / 2, origin.y);\n        const upperRight = Vec2(origin.x + PLAYER_WIDTH / 2, origin.y + PLAYER_HEIGHT);\n\n        // TODO: Lookup this physics shit later\n        // this.physicsBody = new PhysicsBody();\n        this.physicsBody = {};\n        this.physicsBody.aabb = new AABB(lowerLeft, upperRight);\n        this.physicsBody.velocity = Vec2(0, 0);\n\n        this.recordKeyDown = this.recordKeyDown.bind(this);\n        this.recordKeyUp = this.recordKeyUp.bind(this);\n\n        this.keyStates = {};\n\n        this.enable();\n    }\n\n    draw(ctx) {\n        const {\n            lowerLeft,\n        } = this.physicsBody.aabb;\n\n        ctx.fillStyle = '#00FF00';\n        // NOTES: This works as long as the AABB dosn't change size for the player.\n        ctx.fillRect(lowerLeft.x, lowerLeft.y, PLAYER_WIDTH, PLAYER_HEIGHT);\n    }\n\n    processAction(actionName, isActive) {\n        const velocity = this.physicsBody.velocity;\n\n        switch (actionName) {\n            case 'LEFT':\n                velocity.x = isActive ? -MOVE_SPEED : 0;\n\n                // TODO: Remove me once physics is merged\n                this.physicsBody.aabb.add(Vec2(-MOVE_SPEED * 0.1, 0));\n                break;\n            case 'RIGHT':\n                velocity.x = isActive ? MOVE_SPEED : 0;\n\n                this.physicsBody.aabb.add(Vec2(MOVE_SPEED * 0.1, 0));\n                break;\n            case 'JUMP':\n                // TODO: We'll need to actually check to see if we're falling or not\n                //  velocity.y will be 0 at the top of jumps as well as when on the ground\n                velocity.y = velocity.y === 0 ? JUMP_VELOCITY : velocity.y;\n                break;\n            case 'ATTACK':\n                break;\n        }\n    }\n\n    processInput() {\n        for (const action of Object.keys(KEYBINDINGS)) {\n            let isActive = false;\n            for (const key of KEYBINDINGS[action]) {\n                if (this.keyStates[key]) {\n                    isActive = true;\n                    break;\n                }\n            }\n\n            if (isActive) {\n                this.processAction(action, isActive);\n            }\n        }\n    }\n\n    simulate() {\n\n        this.processInput();\n\n    }\n\n    decodeKey(evt) {\n        if (evt.key !== undefined) {\n            return evt.key.toLowerCase();\n        } else {\n            // NOTES: Safari does not support .key.  So we *SHOULD* probably\n            //  make a table that translates .keyCode => .key\n            //  For now, fuck macs\n            throw new Error('Browser must currently support .key property on KeyboardEvent');\n        }\n    }\n\n    recordKeyDown(evt) {\n        this.keyStates[this.decodeKey(evt)] = true;\n    }\n\n    recordKeyUp (evt) {\n        this.keyStates[this.decodeKey(evt)] = false;\n    }\n\n    enable() {\n        window.addEventListener('keydown', this.recordKeyDown);\n        window.addEventListener('keyup', this.recordKeyUp);\n    }\n\n    disable() {\n        window.removeEventListener('keydown', this.recordKeyDown);\n        window.removeEventListener('keyup', this.recordKeyUp);\n    }\n}\n\nclass Platform {\n    constructor(origin) {\n        this.origin = origin;\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = '#ffffff';\n        ctx.fillRect(this.origin.x, this.origin.y, 1, 1);\n    }\n\n    simulate() {}\n\n}\n\n// 1.6:1 aspect ratio\n// export const ASPECT_RATIO = 1.6/1;\nconst ASPECT_RATIO = 16/9;\nconst UNITS_TALL = 20;\nconst SIMULATION_TIMESTEP = 10;\n\nfunction findAppropriateWidth(height) {\n    return ASPECT_RATIO * height;\n}\n\nclass Viewport {\n    /**\n     * [constructor description]\n     * @param  {Vec2} center      Center of the viewport\n     * @param  {Number} minHeight   Initial height (and minHeight) of the viewport\n     * @param  {Number} buffer      The buffer area around the player to push the viewport around\n     */\n    constructor(center, minHeight, buffer=1) {\n        const width = findAppropriateWidth(minHeight);\n        this.aabb = new AABB(Vec2(center.x - width / 2, center.y - minHeight / 2), Vec2(center.x + width / 2, center.y + minHeight / 2));\n        this.buffer = buffer;\n    }\n\n    /**\n     * This updates the viewport position based on the previous size\n     *     and the position of the player\n     * @param  {PhysicsBody} physicsBody The player's physicsBody\n     */\n    updateViewport(physicsBody) {\n        const {\n            upperRight,\n            lowerLeft,\n        } = physicsBody.aabb;\n\n        const push = Vec2(0, 0);\n\n\n        if (upperRight.x + this.buffer > this.aabb.upperRight.x) {\n            push.x = (upperRight.x + this.buffer) - this.aabb.upperRight.x;\n        } else if (lowerLeft.x - this.buffer < this.aabb.lowerLeft.x) {\n            push.x = (lowerLeft.x - this.buffer) - this.aabb.lowerLeft.x;\n        }\n\n        if (upperRight.y + this.buffer > this.aabb.upperRight.y) {\n            push.y = (upperRight.y + this.buffer) - this.aabb.upperRight.y;\n        } else if (lowerLeft.y - this.buffer < this.aabb.lowerLeft.y) {\n            push.y = (lowerLeft.y - this.buffer) - this.aabb.lowerLeft.y;\n        }\n\n        this.aabb.add(push);\n    }\n}\n\nconst UNITS_WIDE = findAppropriateWidth(UNITS_TALL);\n\n\nclass Level {\n    constructor(levelFile) {\n        this.entities = [];\n\n        levelFile.forEach((row, y) => {\n            y = UNITS_TALL - y;\n\n            Array.prototype.forEach.call(row, (unit, x) => {\n                switch (unit.toLowerCase()) {\n                    case 'x':\n                        this.entities.push(new Platform(Vec2(x, y)));\n                        break;\n                    case 'p':\n                        this.player = new Player(Vec2(x, y));\n                        this.entities.push(this.player);\n                        break;\n                }\n            });\n        });\n\n        this.viewport = new Viewport(Vec2(UNITS_WIDE / 2, UNITS_TALL / 2), UNITS_TALL * 0.8, 1);\n        this.showViewport = true;\n    }\n\n    _preDraw() {\n        // 20 units tall, origin starts in bottom left\n        //  positive y goes up\n\n        this.container.ctx.scale(this.container.height / UNITS_TALL, -1 * this.container.height / UNITS_TALL);\n        this.container.ctx.translate(0, -UNITS_TALL);\n\n\n        const adjustedWidth = UNITS_WIDE / this.viewport.aabb.width;\n        const adjustedHeight = UNITS_TALL / this.viewport.aabb.height;\n        this.container.ctx.scale(adjustedWidth, adjustedHeight);\n        this.container.ctx.translate(-this.viewport.aabb.lowerLeft.x, -this.viewport.aabb.lowerLeft.y);\n\n        this.container.ctx.save();\n\n        // TODO: Move camera based on viewport\n    }\n\n    _postDraw() {\n\n        if (this.showViewport) {\n            this.container.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n            this.container.ctx.fillRect(this.viewport.aabb.lowerLeft.x, this.viewport.aabb.lowerLeft.y, this.viewport.aabb.width, this.viewport.aabb.height);\n        }\n\n        this.container.ctx.restore();\n    }\n\n    draw() {\n        this._preDraw();\n\n        const drawingContext = this.container.ctx;\n\n        for (const entity of this.entities) {\n            entity.draw(drawingContext);\n        }\n        // TODO: Draw background\n\n        // TODO: Intersect viewport with entities and draw the intersection\n\n        // TODO: Draw HUD\n\n        this._postDraw();\n    }\n\n    simulate() {\n        for (const entity of this.entities) {\n            entity.simulate();\n        }\n\n        this.viewport.updateViewport(this.player.physicsBody);\n    }\n}\n\nclass GameContainer {\n    constructor(canvas, initialScene) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.stopping = false;\n\n        this.renderLoop = this.renderLoop.bind(this);\n        this.simulationLoop = this.simulationLoop.bind(this);\n\n        this.resizeCanvas = this.resizeCanvas.bind(this);\n        this.lastFrameTime = Date.now();\n        this.FPS = 0;\n\n        this.sceneStack = [];\n\n        if (initialScene) {\n            this.pushScene(initialScene);\n        }\n    }\n\n    pushScene(scene) {\n        this.sceneStack.push(scene);\n        scene.container = this;\n    }\n\n    resizeCanvas() {\n        this.width = this.canvas.clientWidth;\n        this.height = this.canvas.clientHeight;\n\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n\n        if (this.canvas.height) {\n            const ratio = this.width / this.height;\n\n            if (ratio > ASPECT_RATIO) {\n                // Too wide\n                this.width = ASPECT_RATIO * this.height;\n            } else {\n                // Too thin\n                this.height = this.width / ASPECT_RATIO;\n            }\n        }\n    }\n\n    preDraw() {\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n        // This probably won't be needed once we start drawing\n        //  a proper background\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        this.ctx.translate((this.canvas.width - this.width) / 2, (this.canvas.height - this.height) / 2);\n\n        this.ctx.save();\n\n    }\n\n    postDraw() {\n        this.ctx.restore();\n\n        const now = Date.now();\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.textAlign = 'right';\n        this.ctx.font = '16px sans-serif';\n\n        this.FPS = this.FPS * 0.9 + (now - this.lastFrameTime) * 0.1;\n        this.ctx.fillText(`FPS: ${Math.round(1000 / this.FPS)}`, this.width - 10, 16);\n\n        this.lastFrameTime = now;\n    }\n\n    renderLoop() {\n        this.preDraw();\n\n        for (const scene of this.sceneStack) {\n            scene.draw(this.ctx);\n        }\n\n        this.postDraw();\n\n        if (!this.stopping) {\n            window.requestAnimationFrame(this.renderLoop);\n        }\n    }\n\n    simulationLoop() {\n        const startTime = window.performance.now();\n\n        for (const scene of this.sceneStack) {\n            scene.simulate();\n        }\n\n        const now = window.performance.now();\n\n        if (!this.stopping) {\n            setTimeout(this.simulationLoop, Math.max(0, SIMULATION_TIMESTEP - (now - startTime)));\n        }\n\n    }\n\n    start() {\n        this.stopping = false;\n\n        window.requestAnimationFrame(this.renderLoop);\n        this.simulationLoop();\n\n        window.addEventListener('resize', this.resizeCanvas);\n        this.resizeCanvas();\n    }\n\n    stop() {\n        this.stopping = true;\n        window.removeEventListener('resize', this.resizeCanvas);\n    }\n}\n\nconst level = [\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '       xxxxxxxx                                                                                                                        ',\n    '                                                                                                                                       ',\n    '    P                                                                                                                                  ',\n    'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n];\n\nconst canvas = document.getElementById('gameCanvas-layer0');\n\nconst game = new GameContainer(canvas);\ngame.pushScene(new Level(level));\ngame.start();\n"]}