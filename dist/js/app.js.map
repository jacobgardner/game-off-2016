{"version":3,"sources":["node_modules/browserify/node_modules/browser-pack/_prelude.js","node_modules/victor/index.js","src/aabb.js","src/config.js","src/entities/platform.js","src/entities/player.js","src/game-container.js","src/level.js","src/levels/test.js","src/main.js","src/physics-body.js","src/physics.js","src/quadtree.js","src/utils.js","src/viewport.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","Victor","x","y","this","random","min","max","Math","floor","radian2degrees","rad","degrees","degrees2radian","deg","fromArray","arr","fromObject","obj","prototype","addX","vec","addY","add","addScalar","scalar","addScalarX","addScalarY","subtractX","subtractY","subtract","subtractScalar","subtractScalarX","subtractScalarY","divideX","vector","divideY","divide","divideScalar","divideScalarX","divideScalarY","invertX","invertY","invert","multiplyX","multiplyY","multiply","multiplyScalar","multiplyScalarX","multiplyScalarY","normalize","norm","limit","factor","abs","randomize","topLeft","bottomRight","randomizeX","randomizeY","randomizeAny","round","unfloat","toFixed","precision","mixX","amount","mixY","mix","clone","copyX","copyY","copy","zero","dot","vec2","cross","projectOnto","coeff","horizontalAngle","atan2","horizontalAngleDeg","verticalAngle","verticalAngleDeg","angle","angleDeg","direction","rotate","nx","cos","sin","ny","rotateDeg","rotateTo","rotation","rotateToDeg","rotateBy","rotateByDeg","distanceX","absDistanceX","distanceY","absDistanceY","distance","sqrt","distanceSq","dx","dy","lengthSq","magnitude","isZero","isEqualTo","toString","toArray","toObject","PI","AABB","lowerLeft","upperRight","_classCallCheck","_lowerLeft","_upperRight","_calculateDimensions","_dimensions","rhs","diff","ASPECT_RATIO","UNITS_TALL","SIMULATION_TIMESTEP","_aabb","_victor","_physicsBody","Platform","origin","physicsBody","_physicsBody2","default","_aabb2","_victor2","ctx","fillStyle","fillRect","PLAYER_WIDTH","PLAYER_HEIGHT","MOVE_SPEED","JUMP_VELOCITY","KEYBINDINGS","LEFT","RIGHT","DOWN","JUMP","ATTACK","Player","name","aabb","recordKeyDown","bind","recordKeyUp","keyStates","leftSpeed","rightSpeed","enable","actionName","isActive","velocity","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Object","keys","Symbol","iterator","next","done","action","value","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","key","err","return","processAction","processInput","evt","toLowerCase","decodeKey","window","addEventListener","removeEventListener","_config","GameContainer","canvas","initialScene","getContext","stopping","renderLoop","simulationLoop","resizeCanvas","lastFrameTime","Date","now","FPS","sceneStack","pushScene","scene","push","container","width","clientWidth","height","clientHeight","ratio","setTransform","clearRect","translate","save","restore","textAlign","font","dataStr","entities","entity","find","element","accel","currentID","fillText","preDraw","draw","postDraw","requestAnimationFrame","startTime","performance","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","simulate","setTimeout","_player","_platform","_viewport","_physics","_utils","UNITS_WIDE","findAppropriateWidth","Level","levelFile","_this","row","physics","_physics2","forEach","Array","unit","platform","_platform2","addBody","player","_player2","viewport","_viewport2","showViewport","scale","adjustedWidth","adjustedHeight","_preDraw","drawingContext","_postDraw","updateViewport","resolveArea","level","_level","_gameContainer","_test","document","getElementById","game","_gameContainer2","_level2","_test2","start","PhysicsBody","inView","returnBody","inVew","_quadtree","Physics","levelBoundArr","timeStep","arguments","gravity","physicsBodyArr","timeStepFactor","quadTree","_quadtree2","iDCount","put","viewPortPhysicsBody","inview","collisionWith","resolveBody","remove","nearArr","get","bool","nearbyBody","_nearArr","_bool","_nearbyBody","collides","position","physicsBody1","physicsBody2","w","h","QuadTree","maxObjects","maxLevels","_maxObjects","_maxLevels","_nodeArr","_objectArr","index","_getIndex","_split","idStr","findIndex","splice","quad","center","Viewport","minHeight","buffer","_physicsBody$aabb"],"mappings":"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","file":"app.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","exports = module.exports = Victor;\n\n/**\n * # Victor - A JavaScript 2D vector class with methods for common vector operations\n */\n\n/**\n * Constructor. Will also work without the `new` keyword\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = Victor(42, 1337);\n *\n * @param {Number} x Value of the x axis\n * @param {Number} y Value of the y axis\n * @return {Victor}\n * @api public\n */\nfunction Victor (x, y) {\n\tif (!(this instanceof Victor)) {\n\t\treturn new Victor(x, y);\n\t}\n\n\t/**\n\t * The X axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.x;\n\t *     // => 42\n\t *\n\t * @api public\n\t */\n\tthis.x = x || 0;\n\n\t/**\n\t * The Y axis\n\t *\n\t * ### Examples:\n\t *     var vec = new Victor.fromArray(42, 21);\n\t *\n\t *     vec.y;\n\t *     // => 21\n\t *\n\t * @api public\n\t */\n\tthis.y = y || 0;\n};\n\n/**\n * # Static\n */\n\n/**\n * Creates a new instance from an array\n *\n * ### Examples:\n *     var vec = Victor.fromArray([42, 21]);\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromArray\n * @param {Array} array Array with the x and y values at index 0 and 1 respectively\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromArray = function (arr) {\n\treturn new Victor(arr[0] || 0, arr[1] || 0);\n};\n\n/**\n * Creates a new instance from an object\n *\n * ### Examples:\n *     var vec = Victor.fromObject({ x: 42, y: 21 });\n *\n *     vec.toString();\n *     // => x:42, y:21\n *\n * @name Victor.fromObject\n * @param {Object} obj Object with the values for x and y\n * @return {Victor} The new instance\n * @api public\n */\nVictor.fromObject = function (obj) {\n\treturn new Victor(obj.x || 0, obj.y || 0);\n};\n\n/**\n * # Manipulation\n *\n * These functions are chainable.\n */\n\n/**\n * Adds another vector's X axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addX(vec2);\n *     vec1.toString();\n *     // => x:30, y:10\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addX = function (vec) {\n\tthis.x += vec.x;\n\treturn this;\n};\n\n/**\n * Adds another vector's Y axis to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.addY(vec2);\n *     vec1.toString();\n *     // => x:10, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addY = function (vec) {\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds another vector to this one\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.add(vec2);\n *     vec1.toString();\n *     // => x:30, y:40\n *\n * @param {Victor} vector The other vector you want to add to this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.add = function (vec) {\n\tthis.x += vec.x;\n\tthis.y += vec.y;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to both vector axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalar(2);\n *     vec.toString();\n *     // => x: 3, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalar = function (scalar) {\n\tthis.x += scalar;\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the X axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarX(2);\n *     vec.toString();\n *     // => x: 3, y: 2\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarX = function (scalar) {\n\tthis.x += scalar;\n\treturn this;\n};\n\n/**\n * Adds the given scalar to the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(1, 2);\n *\n *     vec.addScalarY(2);\n *     vec.toString();\n *     // => x: 1, y: 4\n *\n * @param {Number} scalar The scalar to add\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.addScalarY = function (scalar) {\n\tthis.y += scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the X axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractX(vec2);\n *     vec1.toString();\n *     // => x:80, y:50\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractX = function (vec) {\n\tthis.x -= vec.x;\n\treturn this;\n};\n\n/**\n * Subtracts the Y axis of another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtractY(vec2);\n *     vec1.toString();\n *     // => x:100, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractY = function (vec) {\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts another vector from this one\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(20, 30);\n *\n *     vec1.subtract(vec2);\n *     vec1.toString();\n *     // => x:80, y:20\n *\n * @param {Victor} vector The other vector you want subtract from this one\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtract = function (vec) {\n\tthis.x -= vec.x;\n\tthis.y -= vec.y;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalar(20);\n *     vec.toString();\n *     // => x: 80, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalar = function (scalar) {\n\tthis.x -= scalar;\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarX(20);\n *     vec.toString();\n *     // => x: 80, y: 200\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarX = function (scalar) {\n\tthis.x -= scalar;\n\treturn this;\n};\n\n/**\n * Subtracts the given scalar from the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 200);\n *\n *     vec.subtractScalarY(20);\n *     vec.toString();\n *     // => x: 100, y: 180\n *\n * @param {Number} scalar The scalar to subtract\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.subtractScalarY = function (scalar) {\n\tthis.y -= scalar;\n\treturn this;\n};\n\n/**\n * Divides the X axis by the x component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.divideX(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideX = function (vector) {\n\tthis.x /= vector.x;\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.divideY(vec2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Victor} vector The other vector you want divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideY = function (vector) {\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by a axis values of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.divide(vec2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Victor} vector The vector to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divide = function (vector) {\n\tthis.x /= vector.x;\n\tthis.y /= vector.y;\n\treturn this;\n};\n\n/**\n * Divides both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalar(2);\n *     vec.toString();\n *     // => x:50, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalar = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t\tthis.y = 0;\n\t}\n\n\treturn this;\n};\n\n/**\n * Divides the X axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarX(2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarX = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.x /= scalar;\n\t} else {\n\t\tthis.x = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Divides the Y axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.divideScalarY(2);\n *     vec.toString();\n *     // => x:100, y:25\n *\n * @param {Number} The scalar to divide by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.divideScalarY = function (scalar) {\n\tif (scalar !== 0) {\n\t\tthis.y /= scalar;\n\t} else {\n\t\tthis.y = 0;\n\t}\n\treturn this;\n};\n\n/**\n * Inverts the X axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertX();\n *     vec.toString();\n *     // => x:-100, y:50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertX = function () {\n\tthis.x *= -1;\n\treturn this;\n};\n\n/**\n * Inverts the Y axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invertY();\n *     vec.toString();\n *     // => x:100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invertY = function () {\n\tthis.y *= -1;\n\treturn this;\n};\n\n/**\n * Inverts both axis\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.invert();\n *     vec.toString();\n *     // => x:-100, y:-50\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.invert = function () {\n\tthis.invertX();\n\tthis.invertY();\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by X component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 0);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyX = function (vector) {\n\tthis.x *= vector.x;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by Y component of given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(0, 2);\n *\n *     vec.multiplyX(vec2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Victor} vector The vector to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyY = function (vector) {\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by values from a given vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     var vec2 = new Victor(2, 2);\n *\n *     vec.multiply(vec2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Victor} vector The vector to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiply = function (vector) {\n\tthis.x *= vector.x;\n\tthis.y *= vector.y;\n\treturn this;\n};\n\n/**\n * Multiplies both vector axis by the given scalar value\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalar(2);\n *     vec.toString();\n *     // => x:200, y:100\n *\n * @param {Number} The scalar to multiply by\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalar = function (scalar) {\n\tthis.x *= scalar;\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the X axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarX(2);\n *     vec.toString();\n *     // => x:200, y:50\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarX = function (scalar) {\n\tthis.x *= scalar;\n\treturn this;\n};\n\n/**\n * Multiplies the Y axis by the given scalar\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.multiplyScalarY(2);\n *     vec.toString();\n *     // => x:100, y:100\n *\n * @param {Number} The scalar to multiply the axis with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.multiplyScalarY = function (scalar) {\n\tthis.y *= scalar;\n\treturn this;\n};\n\n/**\n * Normalize\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.normalize = function () {\n\tvar length = this.length();\n\n\tif (length === 0) {\n\t\tthis.x = 1;\n\t\tthis.y = 0;\n\t} else {\n\t\tthis.divide(Victor(length, length));\n\t}\n\treturn this;\n};\n\nVictor.prototype.norm = Victor.prototype.normalize;\n\n/**\n * If the absolute vector axis is greater than `max`, multiplies the axis by `factor`\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.limit(80, 0.9);\n *     vec.toString();\n *     // => x:90, y:50\n *\n * @param {Number} max The maximum value for both x and y axis\n * @param {Number} factor Factor by which the axis are to be multiplied with\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.limit = function (max, factor) {\n\tif (Math.abs(this.x) > max){ this.x *= factor; }\n\tif (Math.abs(this.y) > max){ this.y *= factor; }\n\treturn this;\n};\n\n/**\n * Randomizes both vector axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomize(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:67, y:73\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomize = function (topLeft, bottomRight) {\n\tthis.randomizeX(topLeft, bottomRight);\n\tthis.randomizeY(topLeft, bottomRight);\n\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeX(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:55, y:50\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeX = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.x, bottomRight.x);\n\tvar max = Math.max(topLeft.x, bottomRight.x);\n\tthis.x = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomizes the y axis with a value between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeY(new Victor(50, 60), new Victor(70, 80`));\n *     vec.toString();\n *     // => x:100, y:66\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeY = function (topLeft, bottomRight) {\n\tvar min = Math.min(topLeft.y, bottomRight.y);\n\tvar max = Math.max(topLeft.y, bottomRight.y);\n\tthis.y = random(min, max);\n\treturn this;\n};\n\n/**\n * Randomly randomizes either axis between 2 vectors\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.randomizeAny(new Victor(50, 60), new Victor(70, 80));\n *     vec.toString();\n *     // => x:100, y:77\n *\n * @param {Victor} topLeft first vector\n * @param {Victor} bottomRight second vector\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.randomizeAny = function (topLeft, bottomRight) {\n\tif (!! Math.round(Math.random())) {\n\t\tthis.randomizeX(topLeft, bottomRight);\n\t} else {\n\t\tthis.randomizeY(topLeft, bottomRight);\n\t}\n\treturn this;\n};\n\n/**\n * Rounds both axis to an integer value\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.unfloat = function () {\n\tthis.x = Math.round(this.x);\n\tthis.y = Math.round(this.y);\n\treturn this;\n};\n\n/**\n * Rounds both axis to a certain precision\n *\n * ### Examples:\n *     var vec = new Victor(100.2, 50.9);\n *\n *     vec.unfloat();\n *     vec.toString();\n *     // => x:100, y:51\n *\n * @param {Number} Precision (default: 8)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.toFixed = function (precision) {\n\tif (typeof precision === 'undefined') { precision = 8; }\n\tthis.x = this.x.toFixed(precision);\n\tthis.y = this.y.toFixed(precision);\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the X axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixX(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:100\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixX = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.x = (1 - amount) * this.x + amount * vec.x;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation of the Y axis towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mixY(vec2, 0.5);\n *     vec.toString();\n *     // => x:100, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mixY = function (vec, amount) {\n\tif (typeof amount === 'undefined') {\n\t\tamount = 0.5;\n\t}\n\n\tthis.y = (1 - amount) * this.y + amount * vec.y;\n\treturn this;\n};\n\n/**\n * Performs a linear blend / interpolation towards another vector\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 100);\n *     var vec2 = new Victor(200, 200);\n *\n *     vec1.mix(vec2, 0.5);\n *     vec.toString();\n *     // => x:150, y:150\n *\n * @param {Victor} vector The other vector\n * @param {Number} amount The blend amount (optional, default: 0.5)\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.mix = function (vec, amount) {\n\tthis.mixX(vec, amount);\n\tthis.mixY(vec, amount);\n\treturn this;\n};\n\n/**\n * # Products\n */\n\n/**\n * Creates a clone of this vector\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = vec1.clone();\n *\n *     vec2.toString();\n *     // => x:10, y:10\n *\n * @return {Victor} A clone of the vector\n * @api public\n */\nVictor.prototype.clone = function () {\n\treturn new Victor(this.x, this.y);\n};\n\n/**\n * Copies another vector's X component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyX(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:10\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyX = function (vec) {\n\tthis.x = vec.x;\n\treturn this;\n};\n\n/**\n * Copies another vector's Y component in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copyY(vec1);\n *\n *     vec2.toString();\n *     // => x:10, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copyY = function (vec) {\n\tthis.y = vec.y;\n\treturn this;\n};\n\n/**\n * Copies another vector's X and Y components in to its own\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *     var vec2 = new Victor(20, 20);\n *     var vec2 = vec1.copy(vec1);\n *\n *     vec2.toString();\n *     // => x:20, y:20\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.copy = function (vec) {\n\tthis.copyX(vec);\n\tthis.copyY(vec);\n\treturn this;\n};\n\n/**\n * Sets the vector to zero (0,0)\n *\n * ### Examples:\n *     var vec1 = new Victor(10, 10);\n *\t\t var1.zero();\n *     vec1.toString();\n *     // => x:0, y:0\n *\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.zero = function () {\n\tthis.x = this.y = 0;\n\treturn this;\n};\n\n/**\n * Calculates the dot product of this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.dot(vec2);\n *     // => 23000\n *\n * @param {Victor} vector The second vector\n * @return {Number} Dot product\n * @api public\n */\nVictor.prototype.dot = function (vec2) {\n\treturn this.x * vec2.x + this.y * vec2.y;\n};\n\nVictor.prototype.cross = function (vec2) {\n\treturn (this.x * vec2.y ) - (this.y * vec2.x );\n};\n\n/**\n * Projects a vector onto another vector, setting itself to the result.\n *\n * ### Examples:\n *     var vec = new Victor(100, 0);\n *     var vec2 = new Victor(100, 100);\n *\n *     vec.projectOnto(vec2);\n *     vec.toString();\n *     // => x:50, y:50\n *\n * @param {Victor} vector The other vector you want to project this vector onto\n * @return {Victor} `this` for chaining capabilities\n * @api public\n */\nVictor.prototype.projectOnto = function (vec2) {\n    var coeff = ( (this.x * vec2.x)+(this.y * vec2.y) ) / ((vec2.x*vec2.x)+(vec2.y*vec2.y));\n    this.x = coeff * vec2.x;\n    this.y = coeff * vec2.y;\n    return this;\n};\n\n\nVictor.prototype.horizontalAngle = function () {\n\treturn Math.atan2(this.y, this.x);\n};\n\nVictor.prototype.horizontalAngleDeg = function () {\n\treturn radian2degrees(this.horizontalAngle());\n};\n\nVictor.prototype.verticalAngle = function () {\n\treturn Math.atan2(this.x, this.y);\n};\n\nVictor.prototype.verticalAngleDeg = function () {\n\treturn radian2degrees(this.verticalAngle());\n};\n\nVictor.prototype.angle = Victor.prototype.horizontalAngle;\nVictor.prototype.angleDeg = Victor.prototype.horizontalAngleDeg;\nVictor.prototype.direction = Victor.prototype.horizontalAngle;\n\nVictor.prototype.rotate = function (angle) {\n\tvar nx = (this.x * Math.cos(angle)) - (this.y * Math.sin(angle));\n\tvar ny = (this.x * Math.sin(angle)) + (this.y * Math.cos(angle));\n\n\tthis.x = nx;\n\tthis.y = ny;\n\n\treturn this;\n};\n\nVictor.prototype.rotateDeg = function (angle) {\n\tangle = degrees2radian(angle);\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateTo = function(rotation) {\n\treturn this.rotate(rotation-this.angle());\n};\n\nVictor.prototype.rotateToDeg = function(rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateTo(rotation);\n};\n\nVictor.prototype.rotateBy = function (rotation) {\n\tvar angle = this.angle() + rotation;\n\n\treturn this.rotate(angle);\n};\n\nVictor.prototype.rotateByDeg = function (rotation) {\n\trotation = degrees2radian(rotation);\n\treturn this.rotateBy(rotation);\n};\n\n/**\n * Calculates the distance of the X axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceX(vec2);\n *     // => -100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceX = function (vec) {\n\treturn this.x - vec.x;\n};\n\n/**\n * Same as `distanceX()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.absDistanceX(vec2);\n *     // => 100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceX = function (vec) {\n\treturn Math.abs(this.distanceX(vec));\n};\n\n/**\n * Calculates the distance of the Y axis between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => -10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceY = function (vec) {\n\treturn this.y - vec.y;\n};\n\n/**\n * Same as `distanceY()` but always returns an absolute number\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceY(vec2);\n *     // => 10\n *\n * @param {Victor} vector The second vector\n * @return {Number} Absolute distance\n * @api public\n */\nVictor.prototype.absDistanceY = function (vec) {\n\treturn Math.abs(this.distanceY(vec));\n};\n\n/**\n * Calculates the euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distance(vec2);\n *     // => 100.4987562112089\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distance = function (vec) {\n\treturn Math.sqrt(this.distanceSq(vec));\n};\n\n/**\n * Calculates the squared euclidean distance between this vector and another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(200, 60);\n *\n *     vec1.distanceSq(vec2);\n *     // => 10100\n *\n * @param {Victor} vector The second vector\n * @return {Number} Distance\n * @api public\n */\nVictor.prototype.distanceSq = function (vec) {\n\tvar dx = this.distanceX(vec),\n\t\tdy = this.distanceY(vec);\n\n\treturn dx * dx + dy * dy;\n};\n\n/**\n * Calculates the length or magnitude of the vector\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.length();\n *     // => 111.80339887498948\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.length = function () {\n\treturn Math.sqrt(this.lengthSq());\n};\n\n/**\n * Squared length / magnitude\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *\n *     vec.lengthSq();\n *     // => 12500\n *\n * @return {Number} Length / Magnitude\n * @api public\n */\nVictor.prototype.lengthSq = function () {\n\treturn this.x * this.x + this.y * this.y;\n};\n\nVictor.prototype.magnitude = Victor.prototype.length;\n\n/**\n * Returns a true if vector is (0, 0)\n *\n * ### Examples:\n *     var vec = new Victor(100, 50);\n *     vec.zero();\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isZero = function() {\n\treturn this.x === 0 && this.y === 0;\n};\n\n/**\n * Returns a true if this vector is the same as another\n *\n * ### Examples:\n *     var vec1 = new Victor(100, 50);\n *     var vec2 = new Victor(100, 50);\n *     vec1.isEqualTo(vec2);\n *\n *     // => true\n *\n * @return {Boolean}\n * @api public\n */\nVictor.prototype.isEqualTo = function(vec2) {\n\treturn this.x === vec2.x && this.y === vec2.y;\n};\n\n/**\n * # Utility Methods\n */\n\n/**\n * Returns an string representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toString();\n *     // => x:10, y:20\n *\n * @return {String}\n * @api public\n */\nVictor.prototype.toString = function () {\n\treturn 'x:' + this.x + ', y:' + this.y;\n};\n\n/**\n * Returns an array representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toArray();\n *     // => [10, 20]\n *\n * @return {Array}\n * @api public\n */\nVictor.prototype.toArray = function () {\n\treturn [ this.x, this.y ];\n};\n\n/**\n * Returns an object representation of the vector\n *\n * ### Examples:\n *     var vec = new Victor(10, 20);\n *\n *     vec.toObject();\n *     // => { x: 10, y: 20 }\n *\n * @return {Object}\n * @api public\n */\nVictor.prototype.toObject = function () {\n\treturn { x: this.x, y: this.y };\n};\n\n\nvar degrees = 180 / Math.PI;\n\nfunction random (min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction radian2degrees (rad) {\n\treturn rad * degrees;\n}\n\nfunction degrees2radian (deg) {\n\treturn deg / degrees;\n}\n","export default class AABB {\n    constructor(lowerLeft, upperRight) {\n        this._lowerLeft = lowerLeft;\n        this._upperRight = upperRight;\n\n        this._calculateDimensions();\n    }\n\n    _calculateDimensions() {\n        this._dimensions = this._upperRight.clone().subtract(this._lowerLeft);\n    }\n\n    add(vec) {\n        this._lowerLeft.add(vec);\n        this._upperRight.add(vec);\n    }\n\n    subtract(vec) {\n        this._lowerLeft.subtract(vec);\n        this._upperRight.subtract(vec);\n    }\n\n    set position(vec) {\n        const diff = vec.clone().subtract(this._lowerLeft);\n\n        this._lowerLeft = vec;\n        this._upperRight.add(diff);\n    }\n\n    get position() {\n        return this._lowerLeft;\n    }\n\n    set lowerLeft(lowerLeft) {\n        this._lowerLeft = lowerLeft;\n\n        this._calculateDimensions();\n    }\n\n    get lowerLeft() {\n        return this._lowerLeft;\n    }\n\n    set upperRight(upperRight) {\n        this._upperRight = upperRight;\n\n        this._calculateDimensions();\n    }\n\n    get upperRight() {\n        return this._upperRight;\n    }\n\n    get width() {\n        return this._dimensions.x;\n    }\n\n    get height() {\n        return this._dimensions.y;\n    }\n\n    // This method protects dimensions from being modified accidentally\n    get dimensions() {\n        return this._dimensions.clone();\n    }\n\n    collisionWith(rhs) {\n        return !(\n            this._upperRight.x < rhs._lowerLeft.x ||\n            rhs._upperRight.x < this._lowerLeft.x ||\n            this._lowerLeft.y > rhs._upperRight.y ||\n            rhs._lowerLeft.y > this._upperRight.y\n        );\n    }\n}","// 1.6:1 aspect ratio\n// export const ASPECT_RATIO = 1.6/1;\nexport const ASPECT_RATIO = 16/9;\nexport const UNITS_TALL = 20;\nexport const SIMULATION_TIMESTEP = 10;\n","import AABB from '../aabb';\nimport Victor from 'victor';\nimport PhysicsBody from '../physics-body';\n\nexport default class Platform {\n    constructor(origin) {\n        this.origin = origin;\n\n        this.physicsBody = new PhysicsBody(new AABB(origin, Victor(origin.x + 1, origin.y + 1)));\n    }\n\n    draw(ctx) {\n        ctx.fillStyle = '#ffffff';\n        ctx.fillRect(this.origin.x, this.origin.y, 1, 1);\n    }\n\n    simulate() {}\n\n}\n","import AABB from '../aabb';\nimport Vec2 from 'victor';\nimport PhysicsBody from '../physics-body';\n\nconst PLAYER_WIDTH = 0.5;\nconst PLAYER_HEIGHT = 1;\nconst MOVE_SPEED = 8;\nconst JUMP_VELOCITY = 9.82;\n\nconst KEYBINDINGS = {\n    // Cardinal Directions\n    LEFT: ['arrowleft', 'a'],\n    RIGHT: ['arrowright', 'd'],\n    DOWN: ['arrowdown', 's'],\n\n    JUMP: ['arrowup', 'w'],\n\n    ATTACK: [' '],\n};\n\n// Don't hate the player.  Hate the game.\nexport default class Player {\n    /**\n     * @param  {Vec2} origin The center, bottom of the player\n     */\n    constructor(origin) {\n        this.name = 'Player';\n\n        const lowerLeft = Vec2(origin.x - PLAYER_WIDTH / 2, origin.y);\n        const upperRight = Vec2(origin.x + PLAYER_WIDTH / 2, origin.y + PLAYER_HEIGHT);\n        const aabb = new AABB(lowerLeft, upperRight);\n        this.physicsBody = new PhysicsBody(aabb);\n\n        this.recordKeyDown = this.recordKeyDown.bind(this);\n        this.recordKeyUp = this.recordKeyUp.bind(this);\n\n        this.keyStates = {};\n\n        this.leftSpeed = 0;\n        this.rightSpeed = 0;\n\n        this.enable();\n    }\n\n    draw(ctx) {\n        const {\n            lowerLeft,\n        } = this.physicsBody.aabb;\n\n        ctx.fillStyle = '#00FF00';\n        // NOTES: This works as long as the AABB dosn't change size for the player.\n        ctx.fillRect(lowerLeft.x, lowerLeft.y, PLAYER_WIDTH, PLAYER_HEIGHT);\n    }\n\n    processAction(actionName, isActive) {\n        const velocity = this.physicsBody.velocity;\n\n        // console.log(actionName, isActive);\n\n        switch (actionName) {\n            case 'LEFT':\n                this.leftSpeed = isActive ? -MOVE_SPEED : 0;\n\n                break;\n            case 'RIGHT':\n                this.rightSpeed = isActive ? MOVE_SPEED : 0;\n\n                break;\n            case 'JUMP':\n                // TODO: We'll need to actually check to see if we're falling or not\n                //  velocity.y will be 0 at the top of jumps as well as when on the ground\n                if (isActive) {\n                    velocity.y = velocity.y === 0 ? JUMP_VELOCITY : velocity.y;\n                }\n                break;\n            case 'ATTACK':\n                break;\n        }\n\n        //console.log(velocity);\n    }\n\n    processInput() {\n        for (const action of Object.keys(KEYBINDINGS)) {\n            let isActive = false;\n            for (const key of KEYBINDINGS[action]) {\n                if (this.keyStates[key]) {\n                    isActive = true;\n                    break;\n                }\n            }\n\n            // if (isActive) {\n            this.processAction(action, isActive);\n            // }\n        }\n\n        this.physicsBody.velocity.x = this.leftSpeed + this.rightSpeed;\n    }\n\n    simulate() {\n\n        this.processInput();\n\n    }\n\n    decodeKey(evt) {\n        if (evt.key !== undefined) {\n            return evt.key.toLowerCase();\n        } else {\n            // NOTES: Safari does not support .key.  So we *SHOULD* probably\n            //  make a table that translates .keyCode => .key\n            //  For now, fuck macs\n            throw new Error('Browser must currently support .key property on KeyboardEvent');\n        }\n    }\n\n    recordKeyDown(evt) {\n        this.keyStates[this.decodeKey(evt)] = true;\n    }\n\n    recordKeyUp (evt) {\n        this.keyStates[this.decodeKey(evt)] = false;\n    }\n\n    enable() {\n        window.addEventListener('keydown', this.recordKeyDown);\n        window.addEventListener('keyup', this.recordKeyUp);\n    }\n\n    disable() {\n        window.removeEventListener('keydown', this.recordKeyDown);\n        window.removeEventListener('keyup', this.recordKeyUp);\n    }\n}\n","import { SIMULATION_TIMESTEP, ASPECT_RATIO } from './config';\n\nexport default class GameContainer {\n    constructor(canvas, initialScene) {\n        this.canvas = canvas;\n        this.ctx = canvas.getContext('2d');\n        this.stopping = false;\n\n        this.renderLoop = this.renderLoop.bind(this);\n        this.simulationLoop = this.simulationLoop.bind(this);\n\n        this.resizeCanvas = this.resizeCanvas.bind(this);\n        this.lastFrameTime = Date.now();\n        this.FPS = 0;\n\n        this.sceneStack = [];\n\n        if (initialScene) {\n            this.pushScene(initialScene);\n        }\n    }\n\n    pushScene(scene) {\n        this.sceneStack.push(scene);\n        scene.container = this;\n    }\n\n    resizeCanvas() {\n        this.width = this.canvas.clientWidth;\n        this.height = this.canvas.clientHeight;\n\n        this.canvas.width = this.width;\n        this.canvas.height = this.height;\n\n        if (this.canvas.height) {\n            const ratio = this.width / this.height;\n\n            if (ratio > ASPECT_RATIO) {\n                // Too wide\n                this.width = ASPECT_RATIO * this.height;\n            } else {\n                // Too thin\n                this.height = this.width / ASPECT_RATIO;\n            }\n        }\n    }\n\n    preDraw() {\n        this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n\n        // This probably won't be needed once we start drawing\n        //  a proper background\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n        this.ctx.translate((this.canvas.width - this.width) / 2, (this.canvas.height - this.height) / 2);\n\n        this.ctx.save();\n\n    }\n    \n    postDraw() {\n        this.ctx.restore();\n\n        const now = Date.now();\n        this.ctx.fillStyle = '#FF0000';\n        this.ctx.textAlign = 'right';\n        this.ctx.font = '16px sans-serif';\n\n        this.FPS = this.FPS * 0.9 + (now - this.lastFrameTime) * 0.1;\n        let dataStr = `FPS: ${Math.round(1000 / this.FPS)}`;\n\n        for (const scene of this.sceneStack) {\n            if (scene.entities) {\n                const entity = scene.entities.find(element => element.name === 'Player');\n                dataStr = `Player Pos: ${entity.physicsBody.x.toFixed(2)}, ${entity.physicsBody.y.toFixed(2)} | `\n                    +`Player Velocity: ${entity.physicsBody.velocity.x.toFixed(2)}, ${entity.physicsBody.velocity.y.toFixed(2)} | `\n                    +`Player Accel: ${entity.physicsBody.accel.x.toFixed(2)}, ${entity.physicsBody.accel.y.toFixed(2)} | `\n                    +`currentID: ${entity.physicsBody.currentID} | `\n                    + dataStr;\n            }\n        }\n\n        this.ctx.fillText(dataStr, this.width - 10, 16);\n\n        this.lastFrameTime = now;\n    }\n\n    renderLoop() {\n        this.preDraw();\n\n        for (const scene of this.sceneStack) {\n            scene.draw(this.ctx);\n        }\n\n        this.postDraw();\n\n        if (!this.stopping) {\n            window.requestAnimationFrame(this.renderLoop);\n        }\n    }\n\n    simulationLoop() {\n        const startTime = window.performance.now();\n\n        for (const scene of this.sceneStack) {\n            scene.simulate();\n        }\n\n        const now = window.performance.now();\n\n        if (!this.stopping) {\n            setTimeout(this.simulationLoop, Math.max(0, SIMULATION_TIMESTEP - (now - startTime)));\n        }\n\n    }\n\n    start() {\n        this.stopping = false;\n\n        window.requestAnimationFrame(this.renderLoop);\n        this.simulationLoop();\n\n        window.addEventListener('resize', this.resizeCanvas);\n        this.resizeCanvas();\n    }\n\n    stop() {\n        this.stopping = true;\n        window.removeEventListener('resize', this.resizeCanvas);\n    }\n}\n","import Player from './entities/player';\nimport Platform from './entities/platform';\nimport Vec2 from 'victor';\nimport Viewport from './viewport';\nimport Physics from './physics';\n\nimport { findAppropriateWidth } from './utils';\n\nimport { UNITS_TALL, SIMULATION_TIMESTEP } from './config';\nconst UNITS_WIDE = findAppropriateWidth(UNITS_TALL);\n\n\nexport default class Level {\n    constructor(levelFile) {\n        this.entities = [];\n\n        let width = 0;\n        for (const row of levelFile) {\n            width = row.length > width ? row.length : width;\n        }\n        this.physics = new Physics([levelFile.length, width], SIMULATION_TIMESTEP);\n\n        levelFile.forEach((row, y) => {\n            y = UNITS_TALL - y;\n\n            Array.prototype.forEach.call(row, (unit, x) => {\n                let platform = new Platform(Vec2(0,0));\n                switch (unit.toLowerCase()) {\n                    case 'x':\n                        platform = new Platform(Vec2(x, y));\n                        this.entities.push(platform);\n                        this.physics.addBody(platform.physicsBody);\n                        break;\n                    case 'p':\n                        this.player = new Player(Vec2(x, y));\n                        this.physics.addBody(this.player.physicsBody);\n                        this.entities.push(this.player);\n                        break;\n                }\n            });\n        });\n\n        this.viewport = new Viewport(Vec2(UNITS_WIDE / 2, UNITS_TALL / 2), UNITS_TALL , 1);\n        this.showViewport = true;\n    }\n\n    _preDraw() {\n        // 20 units tall, origin starts in bottom left\n        //  positive y goes up\n\n        this.container.ctx.scale(this.container.height / UNITS_TALL, -1 * this.container.height / UNITS_TALL);\n        this.container.ctx.translate(0, -UNITS_TALL);\n\n\n        const adjustedWidth = UNITS_WIDE / this.viewport.aabb.width;\n        const adjustedHeight = UNITS_TALL / this.viewport.aabb.height;\n        this.container.ctx.scale(adjustedWidth, adjustedHeight);\n        this.container.ctx.translate(-this.viewport.aabb.lowerLeft.x, -this.viewport.aabb.lowerLeft.y);\n\n        this.container.ctx.save();\n\n        // TODO: Move camera based on viewport\n    }\n\n    _postDraw() {\n\n        if (this.showViewport) {\n            this.container.ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';\n            this.container.ctx.fillRect(this.viewport.aabb.lowerLeft.x, this.viewport.aabb.lowerLeft.y, this.viewport.aabb.width, this.viewport.aabb.height);\n        }\n\n        this.container.ctx.restore();\n    }\n\n    draw() {\n        this._preDraw();\n\n        const drawingContext = this.container.ctx;\n\n        for (const entity of this.entities) {\n            entity.draw(drawingContext);\n        }\n        // TODO: Draw background\n\n        // TODO: Intersect viewport with entities and draw the intersection\n\n        // TODO: Draw HUD\n\n        this._postDraw();\n    }\n\n    simulate() {\n        for (const entity of this.entities) {\n            entity.simulate();\n        }\n\n        this.viewport.updateViewport(this.player.physicsBody);\n\n        this.physics.resolveArea(this.viewport.physicsBody);\n    }\n}\n","const level = [\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '                                                                                                                                       ',\n    '       xxxxxxxxx    x                                                                                                                  ',\n    '                                                                                                                                       ',\n    '    P                                                                                                                                  ',\n    'xxxxxxx x x x x xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',\n];\n\nexport default level;\n","import Level from './level';\nimport GameContainer from './game-container';\n\nimport testLevel from './levels/test';\n\nconst canvas = document.getElementById('gameCanvas-layer0');\n\nconst game = new GameContainer(canvas);\ngame.pushScene(new Level(testLevel));\ngame.start();\n","import AABB from './aabb';\nimport Victor from 'victor';\n\nexport default class PhysicsBody {\n    constructor(aabb) {\n        this.aabb = aabb;\n        //this.aabb = new AABB(Victor(aabb.lowerLeft.x + .001, aabb.lowerLeft.y + .001) , Victor(aabb.upperRight.x - .001, aabb.upperRight.y - .001));\n        //this.aabb.lowerLeft = Victor(aabb.lowerLeft.x + .001, aabb.lowerLeft.y + .001);\n        //this.aabb.upperRight = Victor(aabb.upperRight.x - .001, aabb.upperRight.y - .001);\n        this.velocity = Victor(0,0);//[units/s on x-axis, units/s on y-axis]\n        this.accel = Victor(0,0);// Victor {x: u/(s^2), y: u/(s^2)}\n        this.inView = false;\n    }\n\n    get x() {\n        return this.aabb.lowerLeft.x;\n    }\n\n    get y() {\n        return this.aabb.lowerLeft.y;\n    }\n\n    get w() {\n        return this.aabb.width;\n    }\n\n    get h() {\n        return this.aabb.height;\n    }\n\n    clone() {\n        const returnBody = new PhysicsBody (new AABB(this.lowerLeft.clone(), this.upperRight.clone()), new Victor(this.x, this.y));\n        returnBody.velocity = this.velocity.clone();\n        returnBody.accel = this.accel.clone();\n        returnBody.inVew = this.inView;\n\n        return returnBody;\n    }\n}\n","import AABB from './aabb';\nimport PhysicsBody from './physics-body';\nimport QuadTree from './quadtree';\nimport Victor from 'victor';\n\nexport default class Physics {\n    constructor(levelBoundArr, timeStep = 10, gravity = 9.82) {\n        this.physicsBodyArr = new Array();\n        this.timeStepFactor = timeStep/1000;\n        this.gravity = gravity; //units/(s^2)\n        this.quadTree = new QuadTree(Victor(0, 0), Victor(levelBoundArr[0], levelBoundArr[1]));\n        this.iDCount = 0;\n    }\n\n    addBody(physicsBody) {\n        this.iDCount++;\n        physicsBody.currentID = this.iDCount;\n        this.physicsBodyArr.push(physicsBody);\n        this.quadTree.put(physicsBody);\n    }\n\n    resolveArea(viewPortPhysicsBody) {\n        for (const physicsBody of this.physicsBodyArr) {\n            physicsBody.inview = physicsBody.aabb.collisionWith(viewPortPhysicsBody.aabb);\n            //if (physicsBody.inView) {\n                this.resolveBody(physicsBody);\n            //}\n        }\n\n        return this;\n    }\n\n    resolveBody(physicsBody) {\n        physicsBody.velocity.add(Victor(0, (physicsBody.accel.y - this.gravity) * this.timeStepFactor));\n\n        if (physicsBody.velocity.y !== 0) {\n            this.quadTree.remove(physicsBody, 'currentID');\n            physicsBody.aabb.add(Victor(0, physicsBody.velocity.y * this.timeStepFactor));\n            this.quadTree.put(physicsBody);\n\n            const nearArr = this.quadTree.get(physicsBody);\n\n            let bool = true;\n            for (const nearbyBody of nearArr) {\n                if (bool) {\n                    if (nearbyBody.currentID !== physicsBody.currentID && physicsBody.aabb.collisionWith(nearbyBody.aabb)) {\n                        this.quadTree.remove(physicsBody, 'currentID');\n                        physicsBody.aabb.subtract(Victor(0, physicsBody.velocity.y * this.timeStepFactor));\n                        physicsBody.velocity.y = 0;\n                        this.quadTree.put(physicsBody);\n\n                        bool = false;\n                    } else {\n                        bool = true;\n                    }\n                }\n            }\n        }\n\n        physicsBody.velocity.add(Victor(physicsBody.accel.x * this.timeStepFactor, 0));\n\n        if (physicsBody.velocity.x !== 0) {\n            this.quadTree.remove(physicsBody, 'currentID');\n            physicsBody.aabb.add(Victor(physicsBody.velocity.x * this.timeStepFactor, 0));\n            this.quadTree.put(physicsBody);\n\n            const nearArr = this.quadTree.get(physicsBody);\n            let bool = true;\n\n            for (const nearbyBody of nearArr) {\n                if (bool) {\n                    if (nearbyBody.currentID !== physicsBody.currentID && this.collides(physicsBody, nearbyBody)) {\n                        this.quadTree.remove(physicsBody, 'currentID');\n                        physicsBody.aabb.subtract(Victor(physicsBody.velocity.x * this.timeStepFactor, 0));\n                        physicsBody.velocity.x = 0;\n                        this.quadTree.put(physicsBody);\n\n                        bool = false;\n                    } else {\n                        bool = true;\n                    }\n                }\n            }\n        }\n\n        if (physicsBody.y < 0) {\n            this.quadTree.remove(physicsBody, 'currentID');\n            physicsBody.aabb.position = Victor(physicsBody.x, 0);//test.  everything hits the ground;\n            physicsBody.velocity.y = 0;\n            this.quadTree.put(physicsBody);\n        }\n\n        if (physicsBody.x < 0) {\n            this.quadTree.remove(physicsBody, 'currentID');\n            physicsBody.aabb.position = Victor(0, physicsBody.y);//test.  everything hits the ground;\n            physicsBody.velocity.x = 0;\n            this.quadTree.put(physicsBody);\n        }\n\n        return this;\n    }\n\n    collides(physicsBody1, physicsBody2) {\n        return (physicsBody1.x < physicsBody2.x + physicsBody2.w &&\n            physicsBody1.x + physicsBody1.w > physicsBody2.x &&\n            physicsBody1.y < physicsBody2.y + physicsBody2.h &&\n            physicsBody1.y + physicsBody1.h > physicsBody2.y);\n    }\n}\n","import AABB from './aabb';\nimport Victor from 'victor';\n\nexport default class QuadTree {\n    constructor(aabb, maxObjects = 12, maxLevels = 4, level = 0) {\n        this._aabb = aabb;\n        this._maxObjects = maxObjects;\n        this._maxLevels = maxLevels;\n        this._nodeArr = new Array();\n        this._objectArr = new Array();\n        this._level = level;\n    }\n\n    /*clear() {\n        this = new QuadTree(this._aabb, this._maxObjects, this._maxLevels);\n    }*/\n\n    put(obj) {\n        if (this._nodeArr.length > 0) {\n            const index = this._getIndex(obj);\n\n            if (index !== -1) {\n                this._nodeArr[index].put(obj);\n            }\n        }\n\n        this._objectArr.push(obj);\n\n        if (this._objectArr.length > this._maxObjects && this._level < this._maxLevels) {\n            this._split();\n        }\n    }\n\n    get(obj) {\n        const index = this._getIndex(obj);\n        if (index !== -1 && this._nodeArr.length > 0) {\n            return this._nodeArr[index].get(obj);\n        }\n\n        return this._objectArr;\n    }\n\n    remove(obj, idStr) {\n        const index = this._objectArr.findIndex(element => element[idStr] === obj[idStr]);\n\n        if (index !== -1) {\n            this._objectArr.splice(index, 1);\n            return 1;\n        } else {\n            for (let quad of this._nodeArr) {\n                if (quad.remove(obj, idStr) === 1) {\n                    return 1;\n                }\n            }\n        }\n    }\n\n    /*findNode(obj, idStr) {\n        const index = this._objectArr.findIndex(element => element[idStr] === obj[idStr]);\n\n        if (index !== -1) {\n            this._objectArr.splice(index, 1);\n            return 1;\n        } else {\n            for (let quad of this._nodeArr) {\n                if (quad.remove(obj, idStr) === 1) {\n                    return 1;\n                }\n            }\n        }\n    }*/\n\n    _split() {\n        const center = Victor(this._aabb.width / 2, this._aabb.height / 2);\n\n        this._nodeArr.push(new QuadTree(new AABB(Victor(this._aabb.x + center.x, this._aabb.y), center), this._maxObjects, this._maxLevels, this._level + 1));\n        this._nodeArr.push(new QuadTree(new AABB(Victor(this._aabb.x, this._aabb.y), center), this._maxObjects, this._maxLevels, this._level + 1));\n        this._nodeArr.push(new QuadTree(new AABB(Victor(this._aabb.x, this._aabb.y + center.y), center), this._maxObjects, this._maxLevels, this._level + 1));\n        this._nodeArr.push(new QuadTree(new AABB(Victor(this._aabb.x + center.x, this._aabb.y + center.y), center), this._maxObjects, this._maxLevels, this._level + 1));\n\n        let i = 0;\n        while (i < this._objectArr.length) {\n            const index = this._getIndex(this._objectArr[i]);\n            if (index !== -1) {\n                this._nodeArr[index].put(this._objectArr.splice(i,1));\n            } else {\n                i++;\n            }\n        }\n    }\n\n    _getIndex(obj) {\n        let index = -1;\n        const center = Victor(this._aabb.x + this._aabb.width / 2, this._aabb.y + this._aabb.height / 2);\n\n        if (obj.x + obj.w < center.x) {\n            if (obj.y > center.y) {\n                index = 1;\n            } else if (obj.y + obj.h < center.y) {\n                index = 2;\n            }\n        } else if (obj.x > center.x) {\n            if (obj.y > center.y) {\n                index = 0;\n            } else if (obj.y + obj.h < center.y) {\n                index = 3;\n            }\n        }\n\n        return index;\n    }\n}\n","import { ASPECT_RATIO } from './config';\n\nexport function findAppropriateWidth(height) {\n    return ASPECT_RATIO * height;\n}","import { findAppropriateWidth } from './utils';\nimport AABB from './aabb';\nimport Vec2 from 'victor';\nimport PhysicsBody from './physics-body';\n\nexport default class Viewport {\n    /**\n     * [constructor description]\n     * @param  {Vec2} center      Center of the viewport\n     * @param  {Number} minHeight   Initial height (and minHeight) of the viewport\n     * @param  {Number} buffer      The buffer area around the player to push the viewport around\n     */\n    constructor(center, minHeight, buffer=1) {\n        const width = findAppropriateWidth(minHeight);\n        this.aabb = new AABB(Vec2(center.x - width / 2, center.y - minHeight / 2), Vec2(center.x + width / 2, center.y + minHeight / 2));\n        this.physicsBody = new PhysicsBody(this.aabb);\n        this.buffer = buffer;\n    }\n\n    /**\n     * This updates the viewport position based on the previous size\n     *     and the position of the player\n     * @param  {PhysicsBody} physicsBody The player's physicsBody\n     */\n    updateViewport(physicsBody) {\n        const {\n            upperRight,\n            lowerLeft,\n        } = physicsBody.aabb;\n\n        const push = Vec2(0, 0);\n\n\n        if (upperRight.x + this.buffer > this.aabb.upperRight.x) {\n            push.x = (upperRight.x + this.buffer) - this.aabb.upperRight.x;\n        } else if (lowerLeft.x - this.buffer < this.aabb.lowerLeft.x) {\n            push.x = (lowerLeft.x - this.buffer) - this.aabb.lowerLeft.x;\n        }\n\n        if (upperRight.y + this.buffer > this.aabb.upperRight.y) {\n            push.y = (upperRight.y + this.buffer) - this.aabb.upperRight.y;\n        } else if (lowerLeft.y - this.buffer < this.aabb.lowerLeft.y) {\n            push.y = (lowerLeft.y - this.buffer) - this.aabb.lowerLeft.y;\n        }\n\n        this.aabb.add(push);\n    }\n}\n"]}